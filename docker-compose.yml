services:
  app:
    build: .
    container_name: goauthboiler
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      pgdb:
        condition: service_healthy
    environment:
      APP_ENV: PROD
      DB_PORT: ${PORT}
      V1_PREFIX: ${V1_PREFIX}
      PG_DB_HOST: pgdb
      PG_DB_USER: ${PG_DB_USER}
      PG_DB_PASSWORD: ${PG_DB_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_DB_PORT: ${PG_DB_PORT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ready"]
      interval: 1s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - ./logs:/var/log
    networks:
      - app-network
      - monitoring-network

  pgdb:
    image: postgres:latest
    user: postgres
    container_name: goauthboiler-postgres
    environment:
      POSTGRES_USER: ${PG_DB_USER}
      POSTGRES_PASSWORD: ${PG_DB_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
    ports:
      - "${PG_DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init-user-ddl.sql:/docker-entrypoint-initdb.d/init-user-ddl.sql
    healthcheck:
      test: "pg_isready -d ${PG_DB_NAME} -U ${PG_DB_USER}"
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: goauthboiler-redis
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Monitoring Stack
  loki:
    image: grafana/loki:latest
    container_name: goauthboiler-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/config.yaml:/etc/loki/config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/config.yaml
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  promtail:
    image: grafana/promtail:latest
    container_name: goauthboiler-promtail
    volumes:
      - ./monitoring/promtail/config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:latest
    container_name: goauthboiler-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: goauthboiler-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis-data:
  postgres_data:
  loki-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge